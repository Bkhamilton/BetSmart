/**
 * Prop Odds API
 *  The Prop Odds API allows you to query player and game prop odds from different bookies. 
 *
 * The version of the OpenAPI document: 0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FantasyBooks from '../model/FantasyBooks';
import FantasyLeagueSnapshot from '../model/FantasyLeagueSnapshot';
import FantasySnapshot from '../model/FantasySnapshot';
import GameInfo from '../model/GameInfo';
import GamesInfo from '../model/GamesInfo';
import HTTPValidationError from '../model/HTTPValidationError';
import Markets from '../model/Markets';
import Participant from '../model/Participant';
import SportsBooks from '../model/SportsBooks';
import Usage from '../model/Usage';

/**
* Default service.
* @module api/DefaultApi
* @version 0.9
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bETAGetFantasyLinesBetaFantasyLinesGameIdMarketGet operation.
     * @callback module:api/DefaultApi~bETAGetFantasyLinesBetaFantasyLinesGameIdMarketGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FantasyBooks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Beta Get Fantasy Lines
     * @param {String} gameId 
     * @param {String} market 
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [activeOnly = false)] 
     * @param {Date} [endDatetime] 
     * @param {module:api/DefaultApi~bETAGetFantasyLinesBetaFantasyLinesGameIdMarketGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FantasyBooks}
     */
    bETAGetFantasyLinesBetaFantasyLinesGameIdMarketGet(gameId, market, apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling bETAGetFantasyLinesBetaFantasyLinesGameIdMarketGet");
      }
      // verify the required parameter 'market' is set
      if (market === undefined || market === null) {
        throw new Error("Missing the required parameter 'market' when calling bETAGetFantasyLinesBetaFantasyLinesGameIdMarketGet");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling bETAGetFantasyLinesBetaFantasyLinesGameIdMarketGet");
      }

      let pathParams = {
        'game_id': gameId,
        'market': market
      };
      let queryParams = {
        'api_key': apiKey,
        'active_only': opts['activeOnly'],
        'end_datetime': opts['endDatetime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FantasyBooks;
      return this.apiClient.callApi(
        '/beta/fantasy_lines/{game_id}/{market}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bETAGetGameBetaGameGameIdGet operation.
     * @callback module:api/DefaultApi~bETAGetGameBetaGameGameIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Beta Get Game
     * @param {String} gameId 
     * @param {String} apiKey 
     * @param {module:api/DefaultApi~bETAGetGameBetaGameGameIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameInfo}
     */
    bETAGetGameBetaGameGameIdGet(gameId, apiKey, callback) {
      let postBody = null;
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling bETAGetGameBetaGameGameIdGet");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling bETAGetGameBetaGameGameIdGet");
      }

      let pathParams = {
        'game_id': gameId
      };
      let queryParams = {
        'api_key': apiKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameInfo;
      return this.apiClient.callApi(
        '/beta/game/{game_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bETAGetGamesBetaGamesLeagueGet operation.
     * @callback module:api/DefaultApi~bETAGetGamesBetaGamesLeagueGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GamesInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Beta Get Games
     * @param {String} league 
     * @param {String} apiKey 
     * @param {Date} date 
     * @param {Object} opts Optional parameters
     * @param {String} [tz] 
     * @param {module:api/DefaultApi~bETAGetGamesBetaGamesLeagueGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GamesInfo}
     */
    bETAGetGamesBetaGamesLeagueGet(league, apiKey, date, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'league' is set
      if (league === undefined || league === null) {
        throw new Error("Missing the required parameter 'league' when calling bETAGetGamesBetaGamesLeagueGet");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling bETAGetGamesBetaGamesLeagueGet");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling bETAGetGamesBetaGamesLeagueGet");
      }

      let pathParams = {
        'league': league
      };
      let queryParams = {
        'api_key': apiKey,
        'date': date,
        'tz': opts['tz']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GamesInfo;
      return this.apiClient.callApi(
        '/beta/games/{league}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bETAGetMarketsBetaMarketsGameIdGet operation.
     * @callback module:api/DefaultApi~bETAGetMarketsBetaMarketsGameIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Markets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Beta Get Markets
     * @param {String} gameId 
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [fantasy = false)] 
     * @param {module:api/DefaultApi~bETAGetMarketsBetaMarketsGameIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Markets}
     */
    bETAGetMarketsBetaMarketsGameIdGet(gameId, apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling bETAGetMarketsBetaMarketsGameIdGet");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling bETAGetMarketsBetaMarketsGameIdGet");
      }

      let pathParams = {
        'game_id': gameId
      };
      let queryParams = {
        'api_key': apiKey,
        'fantasy': opts['fantasy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Markets;
      return this.apiClient.callApi(
        '/beta/markets/{game_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bETAGetOddsBetaOddsGameIdMarketGet operation.
     * @callback module:api/DefaultApi~bETAGetOddsBetaOddsGameIdMarketGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SportsBooks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Beta Get Odds
     * @param {String} gameId 
     * @param {String} market 
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [activeOnly = false)] 
     * @param {Date} [endDatetime] 
     * @param {module:api/DefaultApi~bETAGetOddsBetaOddsGameIdMarketGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SportsBooks}
     */
    bETAGetOddsBetaOddsGameIdMarketGet(gameId, market, apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling bETAGetOddsBetaOddsGameIdMarketGet");
      }
      // verify the required parameter 'market' is set
      if (market === undefined || market === null) {
        throw new Error("Missing the required parameter 'market' when calling bETAGetOddsBetaOddsGameIdMarketGet");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling bETAGetOddsBetaOddsGameIdMarketGet");
      }

      let pathParams = {
        'game_id': gameId,
        'market': market
      };
      let queryParams = {
        'api_key': apiKey,
        'active_only': opts['activeOnly'],
        'end_datetime': opts['endDatetime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SportsBooks;
      return this.apiClient.callApi(
        '/beta/odds/{game_id}/{market}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bETAGetPlayerBetaParticipantParticipantIdGet operation.
     * @callback module:api/DefaultApi~bETAGetPlayerBetaParticipantParticipantIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Participant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Beta Get Player
     * @param {Number} participantId 
     * @param {String} apiKey 
     * @param {module:api/DefaultApi~bETAGetPlayerBetaParticipantParticipantIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Participant}
     */
    bETAGetPlayerBetaParticipantParticipantIdGet(participantId, apiKey, callback) {
      let postBody = null;
      // verify the required parameter 'participantId' is set
      if (participantId === undefined || participantId === null) {
        throw new Error("Missing the required parameter 'participantId' when calling bETAGetPlayerBetaParticipantParticipantIdGet");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling bETAGetPlayerBetaParticipantParticipantIdGet");
      }

      let pathParams = {
        'participant_id': participantId
      };
      let queryParams = {
        'api_key': apiKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Participant;
      return this.apiClient.callApi(
        '/beta/participant/{participant_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bETAGetUsageBetaUsageGet operation.
     * @callback module:api/DefaultApi~bETAGetUsageBetaUsageGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Usage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Beta Get Usage
     * @param {String} apiKey 
     * @param {module:api/DefaultApi~bETAGetUsageBetaUsageGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Usage}
     */
    bETAGetUsageBetaUsageGet(apiKey, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling bETAGetUsageBetaUsageGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Usage;
      return this.apiClient.callApi(
        '/beta/usage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bETALookupPlayerBetaParticipantLookupGet operation.
     * @callback module:api/DefaultApi~bETALookupPlayerBetaParticipantLookupGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Participant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Beta Lookup Player
     * @param {String} name 
     * @param {String} apiKey 
     * @param {module:api/DefaultApi~bETALookupPlayerBetaParticipantLookupGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Participant}
     */
    bETALookupPlayerBetaParticipantLookupGet(name, apiKey, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling bETALookupPlayerBetaParticipantLookupGet");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling bETALookupPlayerBetaParticipantLookupGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'name': name,
        'api_key': apiKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Participant;
      return this.apiClient.callApi(
        '/beta/participant/lookup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1GetFantasyLinesV1FantasyLinesGameIdMarketGet operation.
     * @callback module:api/DefaultApi~v1GetFantasyLinesV1FantasyLinesGameIdMarketGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FantasyBooks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * V1 Get Fantasy Lines
     * @param {String} gameId 
     * @param {String} market 
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [activeOnly = true)] 
     * @param {Date} [endDatetime] 
     * @param {module:api/DefaultApi~v1GetFantasyLinesV1FantasyLinesGameIdMarketGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FantasyBooks}
     */
    v1GetFantasyLinesV1FantasyLinesGameIdMarketGet(gameId, market, apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling v1GetFantasyLinesV1FantasyLinesGameIdMarketGet");
      }
      // verify the required parameter 'market' is set
      if (market === undefined || market === null) {
        throw new Error("Missing the required parameter 'market' when calling v1GetFantasyLinesV1FantasyLinesGameIdMarketGet");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling v1GetFantasyLinesV1FantasyLinesGameIdMarketGet");
      }

      let pathParams = {
        'game_id': gameId,
        'market': market
      };
      let queryParams = {
        'api_key': apiKey,
        'active_only': opts['activeOnly'],
        'end_datetime': opts['endDatetime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FantasyBooks;
      return this.apiClient.callApi(
        '/v1/fantasy_lines/{game_id}/{market}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1GetFantasySnapshotV1FantasySnapshotLeagueMarketGet operation.
     * @callback module:api/DefaultApi~v1GetFantasySnapshotV1FantasySnapshotLeagueMarketGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FantasySnapshot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * V1 Get Fantasy Snapshot
     * Get all active fantasy lines for the given league and market.
     * @param {String} league 
     * @param {String} market 
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [activeOnly = true)] 
     * @param {module:api/DefaultApi~v1GetFantasySnapshotV1FantasySnapshotLeagueMarketGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FantasySnapshot}
     */
    v1GetFantasySnapshotV1FantasySnapshotLeagueMarketGet(league, market, apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'league' is set
      if (league === undefined || league === null) {
        throw new Error("Missing the required parameter 'league' when calling v1GetFantasySnapshotV1FantasySnapshotLeagueMarketGet");
      }
      // verify the required parameter 'market' is set
      if (market === undefined || market === null) {
        throw new Error("Missing the required parameter 'market' when calling v1GetFantasySnapshotV1FantasySnapshotLeagueMarketGet");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling v1GetFantasySnapshotV1FantasySnapshotLeagueMarketGet");
      }

      let pathParams = {
        'league': league,
        'market': market
      };
      let queryParams = {
        'api_key': apiKey,
        'active_only': opts['activeOnly']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FantasySnapshot;
      return this.apiClient.callApi(
        '/v1/fantasy_snapshot/{league}/{market}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1GetLeagueFantasySnapshotV1FantasySnapshotLeagueGet operation.
     * @callback module:api/DefaultApi~v1GetLeagueFantasySnapshotV1FantasySnapshotLeagueGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FantasyLeagueSnapshot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * V1 Get League Fantasy Snapshot
     * Get all active fantasy lines for the given league.
     * @param {String} league 
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [activeOnly = true)] 
     * @param {module:api/DefaultApi~v1GetLeagueFantasySnapshotV1FantasySnapshotLeagueGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FantasyLeagueSnapshot}
     */
    v1GetLeagueFantasySnapshotV1FantasySnapshotLeagueGet(league, apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'league' is set
      if (league === undefined || league === null) {
        throw new Error("Missing the required parameter 'league' when calling v1GetLeagueFantasySnapshotV1FantasySnapshotLeagueGet");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling v1GetLeagueFantasySnapshotV1FantasySnapshotLeagueGet");
      }

      let pathParams = {
        'league': league
      };
      let queryParams = {
        'api_key': apiKey,
        'active_only': opts['activeOnly']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FantasyLeagueSnapshot;
      return this.apiClient.callApi(
        '/v1/fantasy_snapshot/{league}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1GetOddsV1OddsGameIdMarketGet operation.
     * @callback module:api/DefaultApi~v1GetOddsV1OddsGameIdMarketGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SportsBooks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * V1 Get Odds
     * @param {String} gameId 
     * @param {String} market 
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [activeOnly = true)] 
     * @param {Date} [endDatetime] 
     * @param {module:api/DefaultApi~v1GetOddsV1OddsGameIdMarketGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SportsBooks}
     */
    v1GetOddsV1OddsGameIdMarketGet(gameId, market, apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling v1GetOddsV1OddsGameIdMarketGet");
      }
      // verify the required parameter 'market' is set
      if (market === undefined || market === null) {
        throw new Error("Missing the required parameter 'market' when calling v1GetOddsV1OddsGameIdMarketGet");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling v1GetOddsV1OddsGameIdMarketGet");
      }

      let pathParams = {
        'game_id': gameId,
        'market': market
      };
      let queryParams = {
        'api_key': apiKey,
        'active_only': opts['activeOnly'],
        'end_datetime': opts['endDatetime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SportsBooks;
      return this.apiClient.callApi(
        '/v1/odds/{game_id}/{market}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
