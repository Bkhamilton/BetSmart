/**
 * Prop Odds API
 *  The Prop Odds API allows you to query player and game prop odds from different bookies. 
 *
 * The version of the OpenAPI document: 0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Outcome from './Outcome';

/**
 * The BookMarket model module.
 * @module model/BookMarket
 * @version 0.9
 */
class BookMarket {
    /**
     * Constructs a new <code>BookMarket</code>.
     * @alias module:model/BookMarket
     * @param marketKey {String} 
     * @param outcomes {Array.<module:model/Outcome>} 
     */
    constructor(marketKey, outcomes) { 
        
        BookMarket.initialize(this, marketKey, outcomes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, marketKey, outcomes) { 
        obj['market_key'] = marketKey;
        obj['outcomes'] = outcomes;
    }

    /**
     * Constructs a <code>BookMarket</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BookMarket} obj Optional instance to populate.
     * @return {module:model/BookMarket} The populated <code>BookMarket</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BookMarket();

            if (data.hasOwnProperty('market_key')) {
                obj['market_key'] = ApiClient.convertToType(data['market_key'], 'String');
            }
            if (data.hasOwnProperty('outcomes')) {
                obj['outcomes'] = ApiClient.convertToType(data['outcomes'], [Outcome]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BookMarket</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BookMarket</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BookMarket.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['market_key'] && !(typeof data['market_key'] === 'string' || data['market_key'] instanceof String)) {
            throw new Error("Expected the field `market_key` to be a primitive type in the JSON string but got " + data['market_key']);
        }
        if (data['outcomes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['outcomes'])) {
                throw new Error("Expected the field `outcomes` to be an array in the JSON data but got " + data['outcomes']);
            }
            // validate the optional field `outcomes` (array)
            for (const item of data['outcomes']) {
                Outcome.validateJSON(item);
            };
        }

        return true;
    }


}

BookMarket.RequiredProperties = ["market_key", "outcomes"];

/**
 * @member {String} market_key
 */
BookMarket.prototype['market_key'] = undefined;

/**
 * @member {Array.<module:model/Outcome>} outcomes
 */
BookMarket.prototype['outcomes'] = undefined;






export default BookMarket;

