/**
 * Prop Odds API
 *  The Prop Odds API allows you to query player and game prop odds from different bookies. 
 *
 * The version of the OpenAPI document: 0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SportsBook from './SportsBook';

/**
 * The SportsBooks model module.
 * @module model/SportsBooks
 * @version 0.9
 */
class SportsBooks {
    /**
     * Constructs a new <code>SportsBooks</code>.
     * @alias module:model/SportsBooks
     * @param gameId {String} 
     * @param sportsbooks {Array.<module:model/SportsBook>} 
     */
    constructor(gameId, sportsbooks) { 
        
        SportsBooks.initialize(this, gameId, sportsbooks);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, gameId, sportsbooks) { 
        obj['game_id'] = gameId;
        obj['sportsbooks'] = sportsbooks;
    }

    /**
     * Constructs a <code>SportsBooks</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SportsBooks} obj Optional instance to populate.
     * @return {module:model/SportsBooks} The populated <code>SportsBooks</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SportsBooks();

            if (data.hasOwnProperty('game_id')) {
                obj['game_id'] = ApiClient.convertToType(data['game_id'], 'String');
            }
            if (data.hasOwnProperty('sportsbooks')) {
                obj['sportsbooks'] = ApiClient.convertToType(data['sportsbooks'], [SportsBook]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SportsBooks</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SportsBooks</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SportsBooks.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['game_id'] && !(typeof data['game_id'] === 'string' || data['game_id'] instanceof String)) {
            throw new Error("Expected the field `game_id` to be a primitive type in the JSON string but got " + data['game_id']);
        }
        if (data['sportsbooks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sportsbooks'])) {
                throw new Error("Expected the field `sportsbooks` to be an array in the JSON data but got " + data['sportsbooks']);
            }
            // validate the optional field `sportsbooks` (array)
            for (const item of data['sportsbooks']) {
                SportsBook.validateJSON(item);
            };
        }

        return true;
    }


}

SportsBooks.RequiredProperties = ["game_id", "sportsbooks"];

/**
 * @member {String} game_id
 */
SportsBooks.prototype['game_id'] = undefined;

/**
 * @member {Array.<module:model/SportsBook>} sportsbooks
 */
SportsBooks.prototype['sportsbooks'] = undefined;






export default SportsBooks;

