/**
 * Prop Odds API
 *  The Prop Odds API allows you to query player and game prop odds from different bookies. 
 *
 * The version of the OpenAPI document: 0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Outcome model module.
 * @module model/Outcome
 * @version 0.9
 */
class Outcome {
    /**
     * Constructs a new <code>Outcome</code>.
     * @alias module:model/Outcome
     * @param timestamp {String} 
     * @param handicap {Number} 
     * @param odds {Number} 
     * @param name {String} 
     * @param description {String} 
     */
    constructor(timestamp, handicap, odds, name, description) { 
        
        Outcome.initialize(this, timestamp, handicap, odds, name, description);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, timestamp, handicap, odds, name, description) { 
        obj['timestamp'] = timestamp;
        obj['handicap'] = handicap;
        obj['odds'] = odds;
        obj['name'] = name;
        obj['description'] = description;
    }

    /**
     * Constructs a <code>Outcome</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Outcome} obj Optional instance to populate.
     * @return {module:model/Outcome} The populated <code>Outcome</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Outcome();

            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'String');
            }
            if (data.hasOwnProperty('handicap')) {
                obj['handicap'] = ApiClient.convertToType(data['handicap'], 'Number');
            }
            if (data.hasOwnProperty('odds')) {
                obj['odds'] = ApiClient.convertToType(data['odds'], 'Number');
            }
            if (data.hasOwnProperty('participant')) {
                obj['participant'] = ApiClient.convertToType(data['participant'], 'Number');
            }
            if (data.hasOwnProperty('participant_name')) {
                obj['participant_name'] = ApiClient.convertToType(data['participant_name'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Outcome</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Outcome</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Outcome.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['timestamp'] && !(typeof data['timestamp'] === 'string' || data['timestamp'] instanceof String)) {
            throw new Error("Expected the field `timestamp` to be a primitive type in the JSON string but got " + data['timestamp']);
        }
        // ensure the json data is a string
        if (data['participant_name'] && !(typeof data['participant_name'] === 'string' || data['participant_name'] instanceof String)) {
            throw new Error("Expected the field `participant_name` to be a primitive type in the JSON string but got " + data['participant_name']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }

        return true;
    }


}

Outcome.RequiredProperties = ["timestamp", "handicap", "odds", "name", "description"];

/**
 * @member {String} timestamp
 */
Outcome.prototype['timestamp'] = undefined;

/**
 * @member {Number} handicap
 */
Outcome.prototype['handicap'] = undefined;

/**
 * @member {Number} odds
 */
Outcome.prototype['odds'] = undefined;

/**
 * @member {Number} participant
 */
Outcome.prototype['participant'] = undefined;

/**
 * @member {String} participant_name
 */
Outcome.prototype['participant_name'] = undefined;

/**
 * @member {String} name
 */
Outcome.prototype['name'] = undefined;

/**
 * @member {String} description
 */
Outcome.prototype['description'] = undefined;






export default Outcome;

