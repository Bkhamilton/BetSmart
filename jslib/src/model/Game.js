/**
 * Prop Odds API
 *  The Prop Odds API allows you to query player and game prop odds from different bookies. 
 *
 * The version of the OpenAPI document: 0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Game model module.
 * @module model/Game
 * @version 0.9
 */
class Game {
    /**
     * Constructs a new <code>Game</code>.
     * @alias module:model/Game
     * @param gameId {String} 
     * @param startTimestamp {String} 
     * @param participants {Array.<Number>} 
     */
    constructor(gameId, startTimestamp, participants) { 
        
        Game.initialize(this, gameId, startTimestamp, participants);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, gameId, startTimestamp, participants) { 
        obj['game_id'] = gameId;
        obj['start_timestamp'] = startTimestamp;
        obj['participants'] = participants;
    }

    /**
     * Constructs a <code>Game</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Game} obj Optional instance to populate.
     * @return {module:model/Game} The populated <code>Game</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Game();

            if (data.hasOwnProperty('game_id')) {
                obj['game_id'] = ApiClient.convertToType(data['game_id'], 'String');
            }
            if (data.hasOwnProperty('away_team')) {
                obj['away_team'] = ApiClient.convertToType(data['away_team'], 'String');
            }
            if (data.hasOwnProperty('home_team')) {
                obj['home_team'] = ApiClient.convertToType(data['home_team'], 'String');
            }
            if (data.hasOwnProperty('start_timestamp')) {
                obj['start_timestamp'] = ApiClient.convertToType(data['start_timestamp'], 'String');
            }
            if (data.hasOwnProperty('participants')) {
                obj['participants'] = ApiClient.convertToType(data['participants'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Game</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Game</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Game.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['game_id'] && !(typeof data['game_id'] === 'string' || data['game_id'] instanceof String)) {
            throw new Error("Expected the field `game_id` to be a primitive type in the JSON string but got " + data['game_id']);
        }
        // ensure the json data is a string
        if (data['away_team'] && !(typeof data['away_team'] === 'string' || data['away_team'] instanceof String)) {
            throw new Error("Expected the field `away_team` to be a primitive type in the JSON string but got " + data['away_team']);
        }
        // ensure the json data is a string
        if (data['home_team'] && !(typeof data['home_team'] === 'string' || data['home_team'] instanceof String)) {
            throw new Error("Expected the field `home_team` to be a primitive type in the JSON string but got " + data['home_team']);
        }
        // ensure the json data is a string
        if (data['start_timestamp'] && !(typeof data['start_timestamp'] === 'string' || data['start_timestamp'] instanceof String)) {
            throw new Error("Expected the field `start_timestamp` to be a primitive type in the JSON string but got " + data['start_timestamp']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['participants'])) {
            throw new Error("Expected the field `participants` to be an array in the JSON data but got " + data['participants']);
        }

        return true;
    }


}

Game.RequiredProperties = ["game_id", "start_timestamp", "participants"];

/**
 * @member {String} game_id
 */
Game.prototype['game_id'] = undefined;

/**
 * @member {String} away_team
 */
Game.prototype['away_team'] = undefined;

/**
 * @member {String} home_team
 */
Game.prototype['home_team'] = undefined;

/**
 * @member {String} start_timestamp
 */
Game.prototype['start_timestamp'] = undefined;

/**
 * @member {Array.<Number>} participants
 */
Game.prototype['participants'] = undefined;






export default Game;

