/**
 * Prop Odds API
 *  The Prop Odds API allows you to query player and game prop odds from different bookies. 
 *
 * The version of the OpenAPI document: 0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import BookMarket from './model/BookMarket';
import FantasyBook from './model/FantasyBook';
import FantasyBookMarket from './model/FantasyBookMarket';
import FantasyBookMultiMarket from './model/FantasyBookMultiMarket';
import FantasyBooks from './model/FantasyBooks';
import FantasyLeagueSnapshot from './model/FantasyLeagueSnapshot';
import FantasySnapshot from './model/FantasySnapshot';
import Game from './model/Game';
import GameInfo from './model/GameInfo';
import GamesInfo from './model/GamesInfo';
import HTTPValidationError from './model/HTTPValidationError';
import Line from './model/Line';
import LocationInner from './model/LocationInner';
import Market from './model/Market';
import Markets from './model/Markets';
import Outcome from './model/Outcome';
import Participant from './model/Participant';
import SportsBook from './model/SportsBook';
import SportsBooks from './model/SportsBooks';
import Usage from './model/Usage';
import ValidationError from './model/ValidationError';
import DefaultApi from './api/DefaultApi';


/**
*  The Prop Odds API allows you to query player and game prop odds from different bookies. .<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var PropOddsApi = require('index'); // See note below*.
* var xxxSvc = new PropOddsApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new PropOddsApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new PropOddsApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new PropOddsApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 0.9
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The BookMarket model constructor.
     * @property {module:model/BookMarket}
     */
    BookMarket,

    /**
     * The FantasyBook model constructor.
     * @property {module:model/FantasyBook}
     */
    FantasyBook,

    /**
     * The FantasyBookMarket model constructor.
     * @property {module:model/FantasyBookMarket}
     */
    FantasyBookMarket,

    /**
     * The FantasyBookMultiMarket model constructor.
     * @property {module:model/FantasyBookMultiMarket}
     */
    FantasyBookMultiMarket,

    /**
     * The FantasyBooks model constructor.
     * @property {module:model/FantasyBooks}
     */
    FantasyBooks,

    /**
     * The FantasyLeagueSnapshot model constructor.
     * @property {module:model/FantasyLeagueSnapshot}
     */
    FantasyLeagueSnapshot,

    /**
     * The FantasySnapshot model constructor.
     * @property {module:model/FantasySnapshot}
     */
    FantasySnapshot,

    /**
     * The Game model constructor.
     * @property {module:model/Game}
     */
    Game,

    /**
     * The GameInfo model constructor.
     * @property {module:model/GameInfo}
     */
    GameInfo,

    /**
     * The GamesInfo model constructor.
     * @property {module:model/GamesInfo}
     */
    GamesInfo,

    /**
     * The HTTPValidationError model constructor.
     * @property {module:model/HTTPValidationError}
     */
    HTTPValidationError,

    /**
     * The Line model constructor.
     * @property {module:model/Line}
     */
    Line,

    /**
     * The LocationInner model constructor.
     * @property {module:model/LocationInner}
     */
    LocationInner,

    /**
     * The Market model constructor.
     * @property {module:model/Market}
     */
    Market,

    /**
     * The Markets model constructor.
     * @property {module:model/Markets}
     */
    Markets,

    /**
     * The Outcome model constructor.
     * @property {module:model/Outcome}
     */
    Outcome,

    /**
     * The Participant model constructor.
     * @property {module:model/Participant}
     */
    Participant,

    /**
     * The SportsBook model constructor.
     * @property {module:model/SportsBook}
     */
    SportsBook,

    /**
     * The SportsBooks model constructor.
     * @property {module:model/SportsBooks}
     */
    SportsBooks,

    /**
     * The Usage model constructor.
     * @property {module:model/Usage}
     */
    Usage,

    /**
     * The ValidationError model constructor.
     * @property {module:model/ValidationError}
     */
    ValidationError,

    /**
    * The DefaultApi service constructor.
    * @property {module:api/DefaultApi}
    */
    DefaultApi
};
